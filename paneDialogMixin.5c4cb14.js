var e=Object.defineProperty,t=(t,a,s)=>(((t,a,s)=>{a in t?e(t,a,{enumerable:!0,configurable:!0,writable:!0,value:s}):t[a]=s})(t,"symbol"!=typeof a?a+"":a,s),s);import{C as a,V as s,p as n,d as r,ax as i,w as p}from"./index.5c4cb14.js";var o=Object.defineProperty,h=Object.getOwnPropertyDescriptor;let d=class extends s{constructor(){super(...arguments),t(this,"paneId")}get pane(){return this.$store.state.panes.panes[this.paneId]}get name(){const e=this.$store.state.panes.panes[this.paneId].name;if(!e){if(!e&&this.$store.state.panes.panes[this.paneId].markets.length){const[,e]=n(this.$store.state.panes.panes[this.paneId].markets[0]);return e+" - "+this.$store.state.panes.panes[this.paneId].type}return this.paneId}return e}set name(e){this.$store.commit("panes/SET_PANE_NAME",{id:this.paneId,name:e})}async renamePane(){const e=await r.prompt({action:"Rename",input:this.name});null!==e&&e!==this.name&&(this.name=e)}async resetPane(e){await this.close();let t=e?e.data:null;t||(t=JSON.parse(JSON.stringify(i[this.$store.state.panes.panes[this.paneId].type].state))),await this.$store.dispatch("panes/resetPane",{id:this.paneId,data:t})}async getPreset(){let e=await p.getState(this.paneId);return e||(await p.saveState(this.paneId,this.$store.state[this.paneId]),e=await p.getState(this.paneId)),e}};d=((e,t,a,s)=>{for(var n,r=s>1?void 0:s?h(t,a):t,i=e.length-1;i>=0;i--)(n=e[i])&&(r=(s?n(t,a,r):n(r))||r);return s&&r&&o(t,a,r),r})([a({props:{paneId:{required:!0,type:String}}})],d);export{d as P};
